{"version":3,"sources":["questions.js","navbar.js","qizapp.js","App.js","reportWebVitals.js","index.js"],"names":["Questions","questionText","answerOptions","answerText","isCorrect","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","textAlign","Quizapp","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","Grid","margin","style","height","className","length","Button","top","right","onClick","container","maxWidth","item","xs","sm","paddingTop","map","nextQuestion","handleButtonClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24fa5e41.chunk.js","sourcesContent":["const Questions = [\r\n    {\r\n        questionText: 'Choose the correct HTML element for the largest heading:',\r\n        answerOptions: [\r\n            { answerText: '<h6>', isCorrect: false },\r\n            { answerText: '<heading>', isCorrect: false },\r\n            { answerText: '<h1>', isCorrect: true },\r\n            { answerText: '<head>', isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'What does HTML stand for?',\r\n        answerOptions: [\r\n            { answerText: 'Home Tool Markup Language', isCorrect: false },\r\n            { answerText: 'Hyper Text Markup Language', isCorrect: true },\r\n            { answerText: 'Homelinks And Text Markup Language', isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'What does CSS stand for?',\r\n        answerOptions: [\r\n            { answerText: 'Color Style Sheet', isCorrect: false },\r\n            { answerText: 'Cascading Style Sheet', isCorrect: true },\r\n            { answerText: 'Both of Above', isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'JavaScript is not a programming Language.',\r\n        answerOptions: [\r\n            { answerText: 'True', isCorrect: false },\r\n            { answerText: 'False', isCorrect: true },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'We Can write JavaScript in HTML.',\r\n        answerOptions: [\r\n            { answerText: 'True', isCorrect: true },\r\n            { answerText: 'False', isCorrect: false },\r\n        ],\r\n    },\r\n];\r\n\r\nexport default Questions;","import AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nexport default function ButtonAppBar() {\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 ,textAlign:'center'}}>\r\n            Quiz App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Questions from \"./questions\";\r\nimport ButtonAppBar from \"./navbar\";\r\n\r\nexport default function Quizapp() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const handleButtonClick = (isCorrect) => {\r\n    if (isCorrect === true) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < Questions.length) {\r\n      setCurrentQuestion(nextQuestion);\r\n    } else {\r\n      setShowScore(true);\r\n    }\r\n  };\r\n  const resetQuiz = () => {\r\n    setShowScore(!showScore);\r\n    setCurrentQuestion(0);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ButtonAppBar />\r\n      <Grid sx={{ margin: \"10%\" }}>\r\n        {showScore ? (\r\n          <>\r\n            <div style={{textAlign:'right',height:'50vh'}}>\r\n              <div className=\"score-section\">\r\n                You scored {score} out of {Questions.length}\r\n              </div>\r\n              <Button\r\n                variant=\"outlined\"\r\n                sx={{ position:'relative',top:'90%',right:'0'}}\r\n                onClick={resetQuiz}\r\n              >\r\n                Reset\r\n              </Button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <Grid container maxWidth=\"xl\" className=\"main-container\">\r\n            <Grid item xs=\"12\" sm=\"5\" sx={{ margin: \"5px\" }}>\r\n              <Grid container>\r\n                <Grid item xs=\"12\">\r\n                  <span>\r\n                    <h4>Question {currentQuestion + 1}</h4>\r\n                  </span>\r\n                  /{Questions.length}\r\n                </Grid>\r\n                <Grid item xs=\"12\">\r\n                  <Typography variant=\"h5\">\r\n                    {Questions[currentQuestion].questionText}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs=\"12\" sm=\"5\"\r\n              sx={{ margin: \"5px\", paddingTop: \"35px !important\" }}\r\n            >\r\n              {Questions[currentQuestion].answerOptions.map((answerOptions) => (\r\n                <Button\r\n                  className='options'\r\n                  variant=\"contained\"\r\n                  onClick={() => handleButtonClick(answerOptions.isCorrect)}\r\n                  sx={{ margin: \"5px\" }}\r\n                >\r\n                  {answerOptions.answerText}\r\n                </Button>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Quizapp from \"./qizapp\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Quizapp />\r\n    </>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}